{"name": "Links check Test", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=138.0.7204.185); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalidsessionidexception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7cab3e415+77285]\n\tGetHandleVerifier [0x0x7ff7cab3e470+77376]\n\t(No symbol) [0x0x7ff7ca909a6a]\n\t(No symbol) [0x0x7ff7ca8f5cf5]\n\t(No symbol) [0x0x7ff7ca91a7fa]\n\t(No symbol) [0x0x7ff7ca98fc05]\n\t(No symbol) [0x0x7ff7ca99919b]\n\t(No symbol) [0x0x7ff7ca9885d0]\n\t(No symbol) [0x0x7ff7ca951521]\n\t(No symbol) [0x0x7ff7ca9522b3]\n\tGetHandleVerifier [0x0x7ff7cae21efd+3107021]\n\tGetHandleVerifier [0x0x7ff7cae1c29d+3083373]\n\tGetHandleVerifier [0x0x7ff7cae3bedd+3213485]\n\tGetHandleVerifier [0x0x7ff7cab5884e+184862]\n\tGetHandleVerifier [0x0x7ff7cab6055f+216879]\n\tGetHandleVerifier [0x0x7ff7cab47084+113236]\n\tGetHandleVerifier [0x0x7ff7cab47239+113673]\n\tGetHandleVerifier [0x0x7ff7cab2e298+11368]\n\tBaseThreadInitThunk [0x0x7ffcc30ee8d7+23]\n\tRtlUserThreadStart [0x0x7ffcc479c34c+44]", "trace": "self = <tests.mainpage_test.TestClass object at 0x000002BF97C7BD90>\n\n    @allure.severity(Severity.NORMAL)\n    @allure.story(\"Links Check\")\n    @allure.description(\"Test to check links on the main page\")\n    @allure.title(\"Links check Test\")\n    def test_02_links_check(self):\n        with allure.step(\"Accept cookies if present\"):\n            CookiePage(self.main_page.driver).accept_if_present()\n        with allure.step(\"Check cars link on the main page\"):\n            cars = self.main_page.link_checker_diff(self.main_page.CARS, \"Cars\")\n            print(cars)\n        with allure.step(\"Check stay link on the main page\"):\n            stay = self.main_page.link_checker_diff(self.main_page.STAYS, \"Stay\")\n            print(stay)\n        with allure.step(\"Check magazine link on the main page\"):\n>           magazine = self.main_page.link_checker_diff(self.main_page.MAGAZINE, \"Magazine\")\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nmainpage_test.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\main_page.py:573: in link_checker_diff\n    original_window = self.driver.current_window_handle\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Users\\eruba\\PycharmProjects\\PythonAutomation\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:626: in current_window_handle\n    return self.execute(Command.W3C_GET_CURRENT_WINDOW_HANDLE)[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Users\\eruba\\PycharmProjects\\PythonAutomation\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:454: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002BF97DE57F0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...ff7cab2e298+11368]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffcc30ee8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffcc479c34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=138.0.7204.185); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalidsessionidexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7cab3e415+77285]\nE       \tGetHandleVerifier [0x0x7ff7cab3e470+77376]\nE       \t(No symbol) [0x0x7ff7ca909a6a]\nE       \t(No symbol) [0x0x7ff7ca8f5cf5]\nE       \t(No symbol) [0x0x7ff7ca91a7fa]\nE       \t(No symbol) [0x0x7ff7ca98fc05]\nE       \t(No symbol) [0x0x7ff7ca99919b]\nE       \t(No symbol) [0x0x7ff7ca9885d0]\nE       \t(No symbol) [0x0x7ff7ca951521]\nE       \t(No symbol) [0x0x7ff7ca9522b3]\nE       \tGetHandleVerifier [0x0x7ff7cae21efd+3107021]\nE       \tGetHandleVerifier [0x0x7ff7cae1c29d+3083373]\nE       \tGetHandleVerifier [0x0x7ff7cae3bedd+3213485]\nE       \tGetHandleVerifier [0x0x7ff7cab5884e+184862]\nE       \tGetHandleVerifier [0x0x7ff7cab6055f+216879]\nE       \tGetHandleVerifier [0x0x7ff7cab47084+113236]\nE       \tGetHandleVerifier [0x0x7ff7cab47239+113673]\nE       \tGetHandleVerifier [0x0x7ff7cab2e298+11368]\nE       \tBaseThreadInitThunk [0x0x7ffcc30ee8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffcc479c34c+44]\n\nC:\\Users\\eruba\\PycharmProjects\\PythonAutomation\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "description": "Test to check links on the main page", "steps": [{"name": "Accept cookies if present", "status": "passed", "steps": [{"name": "Accept cookies if banner is present", "status": "passed", "start": 1755766331221, "stop": 1755766331447}], "start": 1755766331221, "stop": 1755766331447}, {"name": "Check cars link on the main page", "status": "passed", "start": 1755766331447, "stop": 1755766340669}, {"name": "Check stay link on the main page", "status": "passed", "start": 1755766340669, "stop": 1755766349943}, {"name": "Check magazine link on the main page", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=138.0.7204.185); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalidsessionidexception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7cab3e415+77285]\n\tGetHandleVerifier [0x0x7ff7cab3e470+77376]\n\t(No symbol) [0x0x7ff7ca909a6a]\n\t(No symbol) [0x0x7ff7ca8f5cf5]\n\t(No symbol) [0x0x7ff7ca91a7fa]\n\t(No symbol) [0x0x7ff7ca98fc05]\n\t(No symbol) [0x0x7ff7ca99919b]\n\t(No symbol) [0x0x7ff7ca9885d0]\n\t(No symbol) [0x0x7ff7ca951521]\n\t(No symbol) [0x0x7ff7ca9522b3]\n\tGetHandleVerifier [0x0x7ff7cae21efd+3107021]\n\tGetHandleVerifier [0x0x7ff7cae1c29d+3083373]\n\tGetHandleVerifier [0x0x7ff7cae3bedd+3213485]\n\tGetHandleVerifier [0x0x7ff7cab5884e+184862]\n\tGetHandleVerifier [0x0x7ff7cab6055f+216879]\n\tGetHandleVerifier [0x0x7ff7cab47084+113236]\n\tGetHandleVerifier [0x0x7ff7cab47239+113673]\n\tGetHandleVerifier [0x0x7ff7cab2e298+11368]\n\tBaseThreadInitThunk [0x0x7ffcc30ee8d7+23]\n\tRtlUserThreadStart [0x0x7ffcc479c34c+44]\n\n", "trace": "  File \"C:\\Users\\eruba\\OneDrive\\מסמכים\\GitHub\\shichor-automation\\tests\\mainpage_test.py\", line 40, in test_02_links_check\n    magazine = self.main_page.link_checker_diff(self.main_page.MAGAZINE, \"Magazine\")\n  File \"C:\\Users\\eruba\\OneDrive\\מסמכים\\GitHub\\shichor-automation\\pages\\main_page.py\", line 573, in link_checker_diff\n    original_window = self.driver.current_window_handle\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\eruba\\PycharmProjects\\PythonAutomation\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 626, in current_window_handle\n    return self.execute(Command.W3C_GET_CURRENT_WINDOW_HANDLE)[\"value\"]\n           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\eruba\\PycharmProjects\\PythonAutomation\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 454, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"C:\\Users\\eruba\\PycharmProjects\\PythonAutomation\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1755766349943, "stop": 1755766356085}], "start": 1755766331220, "stop": 1755766356088, "uuid": "555fde08-0fda-477a-b053-6842b415e55c", "testCaseId": "b97b0400e77310f81030c96b417d5c96", "fullName": "tests.mainpage_test.TestClass#test_02_links_check"}